<?php

use PeachPayments\Checkout\Address;
use PHPUnit\Framework\TestCase;
use PeachPayments\Checkout\CheckoutAPI;
use PeachPayments\Checkout\CheckoutOptions;
use PeachPayments\Checkout\Customer;
use PeachPayments\http\Response;
use PeachPayments\HttpClient;

/**
 * @covers PeachPayments\Checkout\CheckoutAPI
 * @covers PeachPayments\Checkout\CheckoutOptions
 * @covers PeachPayments\Checkout\Address
 * @covers PeachPayments\Checkout\Customer
 * @covers PeachPayments\http\Response
 */
final class CheckoutAPITest extends TestCase
{
  public function testSignDataWithRequiredFields(): void
  {
    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';

    $body = CheckoutAPI::signData('123', '321', $options);

    $this->assertCount(8, $body);
    $this->assertSame('12.32', $body['amount']);
    $this->assertSame('0987654321', $body['nonce']);
    $this->assertSame('https://httpbin.org/post', $body['shopperResultUrl']);
    $this->assertSame('INV-001', $body['merchantTransactionId']);
    $this->assertSame('ZAR', $body['currency']);
    $this->assertSame('DB', $body['paymentType']);
    $this->assertSame('123', $body['authentication.entityId']);
    $this->assertSame('e8d2a1b7075d5f811be5000922ee3631c7b2f89444bc8960fd321cd2fd68d1f7', $body['signature']);
  }

  public function testSignDataWithAutoGeneratedNonce(): void
  {
    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');

    $body = CheckoutAPI::signData('123', '321', $options);

    $this->assertCount(8, $body);
    $this->assertSame('12.32', $body['amount']);
    $this->assertSame('https://httpbin.org/post', $body['shopperResultUrl']);
    $this->assertSame('INV-001', $body['merchantTransactionId']);
    $this->assertSame('ZAR', $body['currency']);
    $this->assertSame('DB', $body['paymentType']);
    $this->assertSame('123', $body['authentication.entityId']);

    $this->assertIsString($body['nonce']);
    $this->assertEquals(36, strlen($body['nonce']));
    $this->assertIsString($body['signature']);
  }

  public function testSignDataWithAllFields(): void
  {
    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';
    $options->billing = new Address('123 street road', 'city', 'state', 'country', '12345', 'street 2', 'Company', '123');
    $options->shipping = new Address('123 street road', 'city', 'state', 'country', '12345', 'street 2', 'Company', '123');
    $options->cancelUrl = 'https://httpbin.org/post?cancel=1';
    $options->customer = new Customer('First', 'Last', '0123456789', 'test@example.com');
    $options->defaultPaymentMethod = 'CARD';
    $options->forceDefaultMethod = true;
    $options->invoiceId = 'INV-0002';
    $options->notificationUrl = 'https://httpbin.org/post?notify=1';
    $options->originator = 'Test API';
    $options->plugin = 'SDK';
    $options->tokeniseCard = true;
    $options->customParameters = array('test' => '1');

    $body = CheckoutAPI::signData('123', '321', $options);

    $this->assertCount(37, $body);

    $this->assertSame('12.32', $body['amount']);
    $this->assertSame('0987654321', $body['nonce']);
    $this->assertSame('https://httpbin.org/post', $body['shopperResultUrl']);
    $this->assertSame('INV-001', $body['merchantTransactionId']);
    $this->assertSame('ZAR', $body['currency']);
    $this->assertSame('DB', $body['paymentType']);
    $this->assertSame('123', $body['authentication.entityId']);

    $this->assertSame('First', $body['customer.givenName']);
    $this->assertSame('Last', $body['customer.surname']);
    $this->assertSame('0123456789', $body['customer.mobile']);
    $this->assertSame('test@example.com', $body['customer.email']);

    $this->assertSame('123 street road', $body['billing.street1']);
    $this->assertSame('street 2', $body['billing.street2']);
    $this->assertSame('city', $body['billing.city']);
    $this->assertSame('state', $body['billing.state']);
    $this->assertSame('country', $body['billing.country']);
    $this->assertSame('12345', $body['billing.postcode']);
    $this->assertSame('Company', $body['billing.company']);
    $this->assertSame('123', $body['billing.houseNumber']);

    $this->assertSame('123 street road', $body['shipping.street1']);
    $this->assertSame('street 2', $body['shipping.street2']);
    $this->assertSame('city', $body['shipping.city']);
    $this->assertSame('state', $body['shipping.state']);
    $this->assertSame('country', $body['shipping.country']);
    $this->assertSame('12345', $body['shipping.postcode']);
    $this->assertSame('Company', $body['shipping.company']);
    $this->assertSame('123', $body['shipping.houseNumber']);

    $this->assertSame('https://httpbin.org/post?cancel=1', $body['cancelUrl']);
    $this->assertSame('https://httpbin.org/post?notify=1', $body['notificationUrl']);

    $this->assertSame('INV-0002', $body['merchantInvoiceId']);
    $this->assertSame('Test API', $body['originator']);
    $this->assertSame('SDK', $body['plugin']);

    $this->assertSame('true', $body['createRegistration']);
    $this->assertSame('1', $body['customParameters[test]']);

    $this->assertSame('CARD', $body['defaultPaymentMethod']);
    $this->assertSame(true, $body['forceDefaultMethod']);

    $this->assertSame('ae2c44f131f4845b960eb49b1558e772b3b8c462f689b0ca629a3a25c7bb1775', $body['signature']);
  }

  public function testPrepareFormPostWithRequiredFields(): void
  {
    $api = new CheckoutAPI('123', '321');

    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';

    $form = $api->prepareFormPost($options);

    $this->assertCount(11, $form);

    $this->assertSame('<form class="checkout-form" method="POST" action="https://secure.peachpayments.com/checkout">', $form[0]);
    $this->assertSame('<input type="hidden" name="amount" value="12.32" />', $form[1]);
    $this->assertSame('<input type="hidden" name="nonce" value="0987654321" />', $form[2]);
    $this->assertSame('<input type="hidden" name="shopperResultUrl" value="https://httpbin.org/post" />', $form[3]);
    $this->assertSame('<input type="hidden" name="merchantTransactionId" value="INV-001" />', $form[4]);
    $this->assertSame('<input type="hidden" name="currency" value="ZAR" />', $form[5]);
    $this->assertSame('<input type="hidden" name="paymentType" value="DB" />', $form[6]);
    $this->assertSame('<input type="hidden" name="authentication.entityId" value="123" />', $form[7]);
    $this->assertSame('<input type="hidden" name="signature" value="e8d2a1b7075d5f811be5000922ee3631c7b2f89444bc8960fd321cd2fd68d1f7" />', $form[8]);
    $this->assertSame('<button class="checkout-button" type="submit">Proceed to Checkout</button>', $form[9]);
    $this->assertSame('</form>', $form[10]);
  }

  public function testPrepareFormPostWithAllFields(): void
  {
    $api = new CheckoutAPI('123', '321');

    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';
    $options->billing = new Address('123 street road', 'city', 'state', 'country', '12345', 'street 2', 'Company', '123');
    $options->shipping = new Address('123 street road', 'city', 'state', 'country', '12345', 'street 2', 'Company', '123');
    $options->cancelUrl = 'https://httpbin.org/post?cancel=1';
    $options->customer = new Customer('First', 'Last', '0123456789', 'test@example.com');
    $options->defaultPaymentMethod = 'CARD';
    $options->forceDefaultMethod = true;
    $options->invoiceId = 'INV-0002';
    $options->notificationUrl = 'https://httpbin.org/post?notify=1';
    $options->originator = 'Test API';
    $options->plugin = 'SDK';
    $options->tokeniseCard = true;
    $options->customParameters = array('test' => '1');

    $form = $api->prepareFormPost($options);

    $this->assertCount(40, $form);

    $items = [
      '<form class="checkout-form" method="POST" action="https://secure.peachpayments.com/checkout">',
      '<input type="hidden" name="amount" value="12.32" />',
      '<input type="hidden" name="nonce" value="0987654321" />',
      '<input type="hidden" name="shopperResultUrl" value="https://httpbin.org/post" />',
      '<input type="hidden" name="merchantTransactionId" value="INV-001" />',
      '<input type="hidden" name="merchantInvoiceId" value="INV-0002" />',
      '<input type="hidden" name="notificationUrl" value="https://httpbin.org/post?notify=1" />',
      '<input type="hidden" name="cancelUrl" value="https://httpbin.org/post?cancel=1" />',
      '<input type="hidden" name="customer.givenName" value="First" />',
      '<input type="hidden" name="customer.surname" value="Last" />',
      '<input type="hidden" name="customer.mobile" value="0123456789" />',
      '<input type="hidden" name="customer.email" value="test@example.com" />',
      '<input type="hidden" name="billing.street1" value="123 street road" />',
      '<input type="hidden" name="billing.street2" value="street 2" />',
      '<input type="hidden" name="billing.city" value="city" />',
      '<input type="hidden" name="billing.company" value="Company" />',
      '<input type="hidden" name="billing.country" value="country" />',
      '<input type="hidden" name="billing.state" value="state" />',
      '<input type="hidden" name="billing.postcode" value="12345" />',
      '<input type="hidden" name="billing.houseNumber" value="123" />',
      '<input type="hidden" name="shipping.street1" value="123 street road" />',
      '<input type="hidden" name="shipping.street2" value="street 2" />',
      '<input type="hidden" name="shipping.city" value="city" />',
      '<input type="hidden" name="shipping.company" value="Company" />',
      '<input type="hidden" name="shipping.country" value="country" />',
      '<input type="hidden" name="shipping.state" value="state" />',
      '<input type="hidden" name="shipping.postcode" value="12345" />',
      '<input type="hidden" name="shipping.houseNumber" value="123" />',
      '<input type="hidden" name="plugin" value="SDK" />',
      '<input type="hidden" name="originator" value="Test API" />',
      '<input type="hidden" name="defaultPaymentMethod" value="CARD" />',
      '<input type="hidden" name="forceDefaultMethod" value="1" />',
      '<input type="hidden" name="currency" value="ZAR" />',
      '<input type="hidden" name="paymentType" value="DB" />',
      '<input type="hidden" name="createRegistration" value="true" />',
      '<input type="hidden" name="customParameters[test]" value="1" />',
      '<input type="hidden" name="authentication.entityId" value="123" />',
      '<input type="hidden" name="signature" value="ae2c44f131f4845b960eb49b1558e772b3b8c462f689b0ca629a3a25c7bb1775" />',
      '<button class="checkout-button" type="submit">Proceed to Checkout</button>',
      '</form>'
    ];

    foreach ($items as $key => $value) {
      $this->assertSame($value, $form[$key]);
    }
  }

  public function testValidate(): void
  {
    $httpClient = $this->createMock(HttpClient::class);
    $httpClient->expects($this->once())
      ->method('post')
      ->with(
        $this->equalTo('https://secure.peachpayments.com/checkout/validate'),
        $this->equalTo('{"amount":"12.32","nonce":"0987654321","shopperResultUrl":"https:\/\/httpbin.org\/post","merchantTransactionId":"INV-001","currency":"ZAR","paymentType":"DB","authentication.entityId":"123","signature":"e8d2a1b7075d5f811be5000922ee3631c7b2f89444bc8960fd321cd2fd68d1f7"}'),
        $this->equalTo(
          [
            'Content-Type: application/json',
            'Accepts: application/json',
            'Referer: https://localhost'
          ]
        )
      )
      ->willReturn(new Response(200, ''));

    $api = new CheckoutAPI('123', '321', $httpClient);

    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';

    $form = $api->validate($options, 'https://localhost');

    $this->assertSame(200, $form->code);
    $this->assertSame('', $form->body);
  }

  public function testInitiateSession(): void
  {
    $httpClient = $this->createMock(HttpClient::class);
    $httpClient->expects($this->once())
      ->method('post')
      ->with(
        $this->equalTo('https://secure.peachpayments.com/checkout/initiate'),
        $this->equalTo('{"amount":"12.32","nonce":"0987654321","shopperResultUrl":"https:\/\/httpbin.org\/post","merchantTransactionId":"INV-001","currency":"ZAR","paymentType":"DB","authentication.entityId":"123","signature":"e8d2a1b7075d5f811be5000922ee3631c7b2f89444bc8960fd321cd2fd68d1f7"}'),
        $this->equalTo(
          [
            'Content-Type: application/json',
            'Accepts: application/json',
            'Referer: https://localhost'
          ]
        )
      )
      ->willReturn(new Response(200, ''));

    $api = new CheckoutAPI('123', '321', $httpClient);

    $options = new CheckoutOptions('INV-001', 'ZAR', 12.32, 'https://httpbin.org/post');
    $options->nonce = '0987654321';

    $form = $api->initiateSession($options, 'https://localhost');

    $this->assertSame(200, $form->code);
    $this->assertSame('', $form->body);
  }

  public function testgetPaymentMethods(): void
  {
    $httpClient = $this->createMock(HttpClient::class);
    $httpClient->expects($this->once())
      ->method('post')
      ->with(
        $this->equalTo('https://secure.peachpayments.com/merchant_specs'),
        $this->equalTo('{"authentication.entityId":"123","currency":"ZAR","signature":"bc64fee618ca70093e1734ce0421942125ebff3f7ff7da17aedecd2a1020b1d1"}'),
        $this->equalTo(
          [
            'Content-Type: application/json',
          ]
        )
      )
      ->willReturn(new Response(200, ''));

    $api = new CheckoutAPI('123', '321', $httpClient);

    $form = $api->getPaymentMethods('ZAR');

    $this->assertSame(200, $form->code);
    $this->assertSame('', $form->body);
  }
}
